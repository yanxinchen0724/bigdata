---
title: Identify solar panels in Ningxia
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.15.2
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

## Project Summary 

The primary objective of this project is to utilize Google Earth Engine (GEE) to identify potential locations for solar panel installations in Ningxia, China. 
By analyzing high-resolution Sentinel-2 satellite imagery, the project focuses on classifying land covers with suitable conditions for solar energy production. 
This initiative supports renewable energy goals, aids in the strategic placement of solar panels, and promotes sustainable development practices.

### Problem Statement 

### End User 

The primary end users are renewable energy companies, government agencies involved in energy and environmental planning, and researchers 
studying the adoption and impact of renewable energy technologies. These users can leverage the detailed mapping of solar installations 
to optimize the management and development of solar energy resources.

### Data

Sentinel-2 ImageCollection: High-resolution multi-spectral images that provide detailed information on surface materials and vegetation, critical for distinguishing solar panels. 

SRTM Digital Elevation Model (DEM): Elevation data to help identify and exclude unsuitable areas for solar panels based on terrain steepness [Available Here] (https://developers.google.com/earth-engine/datasets/catalog/USGS_SRTMGL1_003) )


### Methodolo1. Data Acquisition and Preparation

The project utilizes Sentinel-2 satellite imagery, selected for its high resolution and broad spectral range, filtering images with under 10% cloud cover for optimal clarity. It focuses on visible, NIR, and SWIR bands crucial for deriving indices like NDVI, NDWI, and NDBI, which identify suitable areas for solar installations by assessing vegetation, water, and urbanization. The terrain is analyzed using SRTM data to exclude steep slopes. A combination of these indices and terrain data helps create a mask to filter out unsuitable areas. Random points are generated and labeled for training a Random Forest classifier, which is validated by metrics like overall accuracy and Kappa to ensure robust model performance.


### Interface

1. Introduction of the application(including background, policy, reference, and etc.)
![pic1](D:/Big Data/GroupProject/bigdata/proposal pic/1.png)

2. Map ：Comparing the coverage of green space and desert in different year/area
![pic2](D:/Big Data/GroupProject/bigdata/proposal pic/2.png)

3. Analysis: Create trend graphs of forest coverage rate and total area changes on an annual 
basis.
![pic3](D:/Big Data/GroupProject/bigdata/proposal pic/3.png)
![pic4](D:/Big Data/GroupProject/bigdata/proposal pic/4.png)

4. Layers： Year/ coverage of green space and desert.
![pic5](D:/Big Data/GroupProject/bigdata/proposal pic/5.png)

5. Legend: desert - wasteland – forest ( classified by different density or related value)
![pic6](D:/Big Data/GroupProject/bigdata/proposal pic/6.png)

6. Interative experience
6.1 Custom target information
![pic7](D:/Big Data/GroupProject/bigdata/proposal pic/7.png)

## The Application 

Replace the link below with the link to your application.

:::{.column-page}

<iframe src='https://ollielballinger.users.earthengine.app/view/turkey-earthquake' width='100%' height='700px'></iframe>

:::
## How it Works 

Use this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):

```js
Map.setCenter(35.51898, 33.90153, 15);

Map.setOptions("satellite");

var aoi = ee.Geometry.Point(35.51898, 33.90153).buffer(3000);
```

You can include images:

![Pixelwise T-Test, 2018](images/beirut_change_2020.jpg)

and math:
$$ \Large t = {\frac{\overline{x_1}-\overline{x_2}} {\sqrt{\frac{s^2_1}{n_1} + \frac{s^2_2}{n_2}}}} $$

